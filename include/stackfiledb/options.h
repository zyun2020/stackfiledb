// Copyright (c) 2011 The LevelDB Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file. See the AUTHORS file for names of contributors.

#ifndef STACKFILE_DB_INCLUDE_OPTIONS_H_
#define STACKFILE_DB_INCLUDE_OPTIONS_H_

#include <stddef.h>

#include "stackfiledb/export.h"

namespace stackfiledb {

class Env;
class Logger;

 //Key is generate by user or by db
enum GenerateKeyMode {
  // NOTE: do not change the values of existing entries, as these are
  // part of the persistent format on disk.
  kUser_Generate_key = 0x0,
  kDb_Generate_key = 0x1
};

// Options to control the behavior of a database (passed to DB::Open)
struct STACKFILEDB_EXPORT Options {
  // Create an Options object with default values for all fields.
  Options();

  // -------------------
  // Parameters that affect behavior

  // If true, the database will be created if it is missing.
  bool create_if_missing = false;

  // If true, an error is raised if the database already exists.
  bool error_if_exists = false;

  // If true, the implementation will do aggressive checking of the
  // data it is processing and will stop early if it detects any
  // errors.  This may have unforeseen ramifications: for example, a
  // corruption of one DB entry may cause a large number of entries to
  // become unreadable or for the entire DB to become unopenable.
  bool paranoid_checks = false;

  // Use the specified object to interact with the environment,
  // e.g. to read/write files, schedule background work, etc.
  // Default: Env::Default()
  Env* env;

  // Maximum number of buckets in database, actual buckets count 2 of the bucket_count power.
  // bucket_count must <= 8  actual buckets count <= 256
  int bucket_count = 4;

  //Key is generate by user or by db
  int generate_key_mode = 0;

  int key_bucket_mapping = 0;

  int opt_bucket_type = 0;

  // Any internal progress/error information generated by the db will
  // be written to info_log if it is non-null, or to a file stored
  // in the same directory as the DB contents if info_log is null.
  Logger* info_log = nullptr;

  //Blob data index log buffer, include Items added and items deleted
  int log_buffer_count = 6000;

  //The amount of readers that can be read at the same time  
  int max_reader_count = 600;
  //The amount of writes that can be read at the same time  
  int max_writer_count = 2;

  // Number of open files that can be used by the DB.  You may need to
  // increase this if your database has a large working set .
  int max_open_files = 1000;
 
  // DB will write up to this amount of bytes to a file before
  // switching to a new one.
  // Most clients should leave this parameter alone.  However if your
  // filesystem is more efficient with larger files, you could
  // consider increasing the value.  The downside will be longer
  // compactions and hence longer latency/performance hiccups.
  // Another reason to increase this parameter might be when you are
  // initially populating a large database.
  size_t max_file_size = 256 * 1024 * 1024;
  size_t max_block_size = 4 * 1024 * 1024;

  //percent of the free data stored in the file start compact
  float percent_compact = 0.3f;

  //tolerance of file size when compact to a new file
  // eg: new file size
  // size > max_file_size - max_file_size * file_size_tolerance;
  // size < max_file_size + max_file_size * file_size_tolerance;
  float file_size_tolerance = 0.1f;

};

// Options that control read operations
struct STACKFILEDB_EXPORT ReadOptions {
  ReadOptions() = default;

  // If true, all data read from underlying storage will be
  // verified against corresponding checksums.
  bool verify_checksums = false;

  // Should the data read for this iteration be cached in memory?
  // Callers may wish to set this field to false for bulk scans.
  bool fill_cache = true;

};

// Options that control write operations
struct STACKFILEDB_EXPORT WriteOptions {
  WriteOptions() = default;

  // If true, the write will be flushed from the operating system
  // buffer cache (by calling WritableFile::Sync()) before the write
  // is considered complete.  If this flag is true, writes will be
  // slower.
  //
  // If this flag is false, and the machine crashes, some recent
  // writes may be lost.  Note that if it is just the process that
  // crashes (i.e., the machine does not reboot), no writes will be
  // lost even if sync==false.
  //
  // In other words, a DB write with sync==false has similar
  // crash semantics as the "write()" system call.  A DB write
  // with sync==true has similar crash semantics to a "write()"
  // system call followed by "fsync()".
  bool sync = false;
};

}  // namespace stackfiledb

#endif  // STACKFILE_DB_INCLUDE_OPTIONS_H_
